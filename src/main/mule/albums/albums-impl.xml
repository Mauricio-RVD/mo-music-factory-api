<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sps-logger="http://www.mulesoft.org/schema/mule/sps-logger" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sps-logger http://www.mulesoft.org/schema/mule/sps-logger/current/mule-sps-logger.xsd">
	<sub-flow name="impl-get-albums" doc:id="675b2428-f4ef-4abf-970d-0e9dbd32e160" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="e0d532fb-0a81-4b44-a915-2bdd45b4b3ac" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[attributes.queryParams.albumTitle]" doc:name="albumTitle" doc:id="93df7d86-27e6-44c2-8035-830bacf40638" variableName="albumTitle"/>
		<sps-logger:sps-logger doc:name="Album Title" doc:id="67d52fda-4ee2-4184-8d83-6242d07ff087" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<db:select doc:name="SELECT albums" doc:id="49925717-bf76-4d8f-9e9b-1a1660442a23" config-ref="mysql-config">
			<db:sql ><![CDATA[SELECT DISTINCT ALB.ALBUM_ID, ALB.TITLE, ALB.GENRE, ALB.PUBLICATION_DT, 
  ART.GROUP_NM, ART.ARTIST_ID
    FROM BC_ALBUM ALB 
        LEFT OUTER JOIN BC_ARTIST ART 
          ON ART.ARTIST_ID = ALB.ARTIST_ID
    WHERE ALB.TITLE LIKE :albumTitle
    GROUP BY ALB.TITLE]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
  albumTitle: vars.albumTitle ++ '%'
}]]]></db:input-parameters>
		</db:select>
		<sps-logger:sps-logger doc:name="SELECT Albums" doc:id="a421bd89-8ee0-48ba-8f6e-283777715ab4" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::SELECT::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="Transform Message" doc:id="44cf2bb9-288a-478f-9dec-f6eb65ecc849" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	statusCode: p('http.get.status.ok'),
	message: p('http.get.message.ok'),
	searchCriteria: vars.albumTitle,
	albums: payload map ( album ) -> {
		albumId: album.ALBUM_ID,
		albumTitle: album.TITLE default "",
		genre: album.GENRE default "",
		publicationDate: album.PUBLICATION_DT as String {format: "yyyy-MM-dd"},
		artistId: (album.ARTIST_ID default 0),
		groupName: album.GROUP_NM default ""
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="c6238636-914f-48ab-8b36-db7a584444db" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-albums::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<flow name="impl-add-albums" doc:id="5b6bf915-edef-4999-ade8-0b61f2ddad4d" >
		<http:listener doc:name="Listener" doc:id="0fda32f0-beaf-4adc-8628-4f4da5e17872" config-ref="http-listener-config" path="/batchAddAlbums"/>
		<sps-logger:sps-logger doc:name="INFO START" doc:id="a4319730-f7e2-4093-bed4-2c595a94cc96" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="Transform Message" doc:id="37e2e22b-0f84-473e-9259-d4621467e3b3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload.albums]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="After Transform" doc:id="8e459cb7-8ed1-4ae7-a467-f414dfe9805e" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Transform: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[sizeOf(payload)]" doc:name="numberOfAlbums" doc:id="f5f9b5b0-dc7c-4add-9559-ff8ae08c5156" variableName="numberOfAlbums"/>
		<sps-logger:sps-logger doc:name="Number of Albums" doc:id="0e080613-ff79-4662-ba73-0f31589c5402" config-ref="SPS_Logger_Config" level="WARN" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::numberOfAlbums: '  ++ write(vars.numberOfAlbums, 'application/json')]" category="${logcat}"/>
		<batch:job jobName="impl-add-albums-batch-job" doc:id="74c0208a-f016-4f9d-9906-c5188e24b382" maxFailedRecords="10">
			<batch:process-records >
				<batch:step name="process-all-records" doc:id="926a2da3-6a0d-474a-80aa-d27af85a7660" >
					<sps-logger:sps-logger doc:name="Batch Start" doc:id="712ece01-6e61-4215-939f-3c3c86667b92" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::Start: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<set-payload value='#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;		albumIdParam: 		0,&#10;		titleParam: 		payload.albumTitle,&#10;		genreParam: 		payload.genre,&#10;		publicationParam: 	payload.publicationDate,&#10;		statusParam: 	"mo",&#10;		artistIdParam: 	payload.artistId&#10;}]' doc:name="Insert payload" doc:id="1eaab588-ca71-405f-8718-1e2f38cea45a" />
					<sps-logger:sps-logger doc:name="Insert Payload" doc:id="ee6baec4-c481-4383-985e-9422746c7700" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<batch:aggregator doc:name="bulk-insert-albums" doc:id="89342ded-a891-4cf9-8f83-f77a9f46bf19" size="3">
						<sps-logger:sps-logger doc:name="Bulk Start" doc:id="a7287612-5784-4250-8dc8-de19e75a519f" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::BulkStart::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
						<db:bulk-insert doc:name="Bulk insert Album" doc:id="e5d1f63c-8bdf-47a1-b3da-bdc5434acb55" config-ref="mysql-config">
							<db:sql ><![CDATA[insert into BC_MUSIC_FACTORY.BC_ALBUM 
   (album_id,title, genre, publication_dt, status_cd, artist_id) values
       (:albumIdParam,
        :titleParam,
        :genreParam,
        :publicationParam,
        :statusParam,
        :artistIdParam)
]]></db:sql>
						</db:bulk-insert>
						<sps-logger:sps-logger doc:name="Bulk End" doc:id="a889cf74-5dba-4f74-aa46-02990ae7aef4" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::BulkEnd::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
					</batch:aggregator>
				</batch:step>
				<batch:step name="failures-only-step" doc:id="61f4e5c4-85e3-4d02-8a2d-f4a8bcce48f8" acceptPolicy="ONLY_FAILURES">
					<sps-logger:sps-logger doc:name="Failure" doc:id="387a8129-39db-4500-b8bc-c4f657bf6f77" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="WARN" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::FailuresOnlyStep:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<db:insert doc:name="Record Album Title as Error" doc:id="be81a3b5-3e9e-4f9d-9bb9-60d5576794ba" config-ref="mysql-config">
						<db:sql ><![CDATA[INSERT INTO BC_MUSIC_FACTORY.BC_STAGING_ERROR (STAGING_ID, STAGING_RECORD, STATUS_CD) 
    VALUES (NULL, :stagingRecord, :statusParam)]]></db:sql>
						<db:input-parameters ><![CDATA[#[{
    stagingRecord: payload.titleParam as String,
    statusParam: payload.statusParam as String
}]]]></db:input-parameters>
					</db:insert>
					<sps-logger:sps-logger doc:name="Insert Failure" doc:id="6a1a2db9-f28c-41be-82f7-fe03373010c3" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="WARN" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::Batch::InsertFailure: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
				</batch:step>
			</batch:process-records>
			<batch:on-complete >
				<sps-logger:sps-logger doc:name="Before Transform" doc:id="295eae76-a06b-4348-9d27-5b011f0c63a5" config-ref="SPS_Logger_Config" eventName="BEFORE TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::OnComplete::payload:'  ++ write(payload, 'application/json')]" category="${logcat}" />
				<ee:transform doc:name="Transform Message" doc:id="14de1a06-24bd-4b51-828e-edf30b946902" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var batchSummary = payload
---
{
	"totalRecords": batchSummary.totalRecords default 0,
	"failedRecords": batchSummary.failedRecords default 0,
	"successfulRecords": batchSummary.successfulRecords default 0
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<sps-logger:sps-logger doc:name="INFO END" doc:id="04ec3b55-5c73-4f67-9402-c30d04371d1e" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-albums::OnComplete::End:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
			</batch:on-complete>
		</batch:job>
	</flow>
	</mule>
