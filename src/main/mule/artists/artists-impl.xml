<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sps-logger="http://www.mulesoft.org/schema/mule/sps-logger" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sps-logger http://www.mulesoft.org/schema/mule/sps-logger/current/mule-sps-logger.xsd">
	<sub-flow name="sr-find-duplicate-artist" doc:id="0e53dff8-a04f-4bef-8d7b-b5b10e147014" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="a6e84162-0605-4299-9907-425db39e535d" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-find-duplicate-artist::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[%dw 2.0&#10;output application/java&#10;var artist = payload.artist&#10;---&#10;{&#10;    groupName: 	artist.groupName,&#10;    firstName: 	artist.firstName,&#10;    lastName:     artist.lastName,&#10;    dateOfBirth:  artist.dateOfBirth&#10;}]" doc:name="queryParamList" doc:id="991108ee-0832-47c1-b1bd-d6eff8db53b4" variableName="queryParamList"/>
		<sps-logger:sps-logger doc:name="queryParamList" doc:id="dedcf97c-49d0-4f73-a97c-7c4b127ee64a" config-ref="SPS_Logger_Config" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-find-duplicate-artist::VAR::queryParamList:'  ++ write(vars.queryParamList, 'application/json')]" category="${logcat}"/>
		<flow-ref doc:name="sr-select-artists" doc:id="f122282e-3887-45ad-baef-f6f520da93c1" name="sr-select-artists"/>
		<sps-logger:sps-logger doc:name="INFO sizeOf" doc:id="d0241a23-eee8-4fa0-a61a-f6daf1cef678" config-ref="SPS_Logger_Config" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-find-duplicate-artist::SizeOfPayload: '  ++ sizeOf(payload.artists)]" category="${logcat}"/>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="c697f661-59fc-457d-a8f7-acb5893bae09" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-find-duplicate-artist::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="sr-build-query-param-list" doc:id="64ea6de7-9aa9-4262-82ed-03562ce4abac" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="e24e0616-3bdc-453a-a995-e0c416cae43c" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-build-query-param-list::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="queryParams" doc:id="4e93a149-1b70-4ba8-a9dc-c86a347533f9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	firstName: attributes.queryParams.firstName,
	lastName: attributes.queryParams.lastName,
	dateOfBirth: attributes.queryParams.dateOfBirth,
	groupName: attributes.queryParams.groupName
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="e63fb1b0-1838-417c-9ccb-019f7061ef81" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-build-query-param-list::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="sr-select-artists" doc:id="e1fe35ec-8f23-4920-8c13-7c42e4045f02" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="67903095-631d-463a-96a0-ef650b83f645" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-select-artists::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[%dw 2.0&#10;   output application/java&#10;---&#10;(&quot;1=1&quot; &#10;    ++ (if(vars.queryParamList.lastName != null) &quot; AND lower(LAST_NM) LIKE concat(lower(:lastName),'%')&quot; else &quot;&quot;)&#10;    ++ (if(vars.queryParamList.firstName != null) &quot; AND lower(FIRST_NM) LIKE concat(lower(:firstName),'%')&quot; else &quot;&quot;)&#10;    ++ (if(vars.queryParamList.groupName != null) &quot; AND lower(GROUP_NM) LIKE concat(lower(:groupName),'%')&quot; else &quot;&quot;)&#10;    ++ (if(vars.queryParamList.dateOfBirth != null) &quot; AND BIRTH_DATE = :dateOfBirth&quot; else &quot;&quot;)&#10;) as String]" doc:name="whereClause" doc:id="2c94c913-f29e-47ea-b710-0e1f750b9001" variableName="whereClause"/>
		<sps-logger:sps-logger doc:name="Where Clause" doc:id="e9e55fa2-983a-4b4f-97af-ad4cd19e4dc3" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-select-artists::VAR::whereClause: ' ++ write(vars.whereClause,'application/json')]" category="${logcat}"/>
		<db:select doc:name="SELECT artist" doc:id="43f1ebf0-16e0-497b-ba5c-10ffa477a50a" config-ref="mysql-config">
			<db:sql><![CDATA[#["SELECT ARTIST_ID, GROUP_NM, FIRST_NM, LAST_NM, BIRTH_DATE, MI, DEATH_DATE 	
    FROM BC_ARTIST 
	  WHERE $(vars.whereClause)"]]]></db:sql>
			<db:input-parameters><![CDATA[#[vars.queryParamList]]]></db:input-parameters>
		</db:select>
		<sps-logger:sps-logger doc:name="Select Artist" doc:id="bc1b3ea4-ce7c-434a-b236-8925318ef012" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-select-artists::Select::payload: ' ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
		<ee:transform doc:name="Transform Message" doc:id="5ea52e16-c03c-4473-a7bd-e663986e6782">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
		statusCode: p('http.get.status.ok'),
		message: p('http.get.message.ok'),
		searchCriteria: ("[" 
		++ (if(vars.queryParamList.lastName != null) "lastName: '$(vars.queryParamList.lastName)', " else "")
++ (if(vars.queryParamList.firstName != null) "firstName: '$(vars.queryParamList.firstName)', " else "")
++ (if(vars.queryParamList.groupName != null) "groupName: '$(vars.queryParamList.groupName)', " else "")
++ (if(vars.queryParamList.dateOfBirth != null) "birthDate: '$(vars.queryParamList.dateOfBirth)', " else "")
    	++ "]"	),
    	artists: payload map ( artist ) -> {
		artistId: artist.ARTIST_ID default 0,
		groupName: artist.GROUP_NM default "",
		lastName: artist.LAST_NM default "",
		firstName: artist.FIRST_NM default "",
		mi: artist.MI default "",
		dateOfBirth: artist.BIRTH_DATE as String {format: "yyyy-MM-dd"} default "",
		(if (artist.DEATH_DATE != null) (dateOfDeath: artist.DEATH_DATE as String {format: "yyyy-MM-dd"}) else dateOfDeath: "")
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="2dedf674-0418-4750-9515-37bf63e19572" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-select-artists::END::payload: ' ++ write(payload, &quot;application/json&quot;)]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="impl-get-artists" doc:id="494a6786-f404-4294-968b-f5bfe4f753ba" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="bb1e1817-0f61-4502-aebd-0bdc47c59341" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-artists::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<flow-ref doc:name="sr-build-query-param-list" doc:id="5220f29f-fd40-4839-9e01-6654cd902c70" name="sr-build-query-param-list" target="queryParamList"/>
		<sps-logger:sps-logger doc:name="Select Artists" doc:id="faacef63-24ad-4b5b-9355-9a0c94dc9030" config-ref="SPS_Logger_Config" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-artists::payload: '  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<flow-ref doc:name="sr-select-artists" doc:id="69324594-5647-4cda-bc87-97cb964ada6e" name="sr-select-artists" />
		<sps-logger:sps-logger doc:name="INFO END" doc:id="c912aa99-7826-4d6f-8531-bf06bb81ad5c" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-get-artists::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="sr-insert-artist" doc:id="86d44d27-54aa-4bca-98be-ff5f83261186" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="d5cd7f1f-6dbd-4246-96b4-61d8fd0306d4" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[payload.artist]" doc:name="incomingArtist" doc:id="626e1b5b-718b-4cc2-bdf6-1c1bbbd64fc7" variableName="incomingArtist"/>
		<try doc:name="Try" doc:id="292611a1-b4c7-4d15-9e9f-1fcaea975152" >
			<sps-logger:sps-logger doc:name="Incoming Artist" doc:id="8c711a12-a31d-4897-ac85-8c55e0074af6" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::Try::incomingArtist:'  ++ write(vars.incomingArtist, 'application/json')]" category="${logcat}"/>
			<db:insert doc:name="Insert Artist" doc:id="ed5c0d9c-aa11-4d65-bf6c-b4f572b46411" config-ref="mysql-config">
			<db:sql><![CDATA[INSERT INTO BC_MUSIC_FACTORY.BC_ARTIST 
         (ARTIST_ID, GROUP_NM, FIRST_NM, LAST_NM, MI, BIRTH_DATE, DEATH_DATE, STATUS_CD) 
         VALUES (NULL, :groupName, :firstName, :lastName, :mi, :birthDate, :deathDate, 'mo')]]></db:sql>
			<db:input-parameters><![CDATA[#[{
    groupName: 	vars.incomingArtist.groupName,
    firstName: 	vars.incomingArtist.firstName,
    lastName: 	vars.incomingArtist.lastName,
    mi: 	  	vars.incomingArtist.mi,
    birthDate: 	vars.incomingArtist.dateOfBirth,
    deathDate: 	vars.incomingArtist.dateOfDeath
}]]]></db:input-parameters>
		</db:insert>
			<sps-logger:sps-logger doc:name="Artist" doc:id="4daf5ed2-2cd7-491b-bf0b-ca8d538c2b66" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::Try::Artist:' ++ write(payload, 'application/json')]" category="${logcat}"/>
			<db:select doc:name="Select Insert" doc:id="d5af616a-745f-4b0a-b8e8-a10f93e67328" config-ref="mysql-config" target="newArtistId">
			<db:sql><![CDATA[SELECT MAX(artist_id) AS artist_id from BC_MUSIC_FACTORY.BC_ARTIST
    WHERE GROUP_NM = :groupName 
          AND BIRTH_DATE = :birthDate 
          AND FIRST_NM = :firstName
          AND LAST_NM = :lastName
]]></db:sql>
			<db:input-parameters><![CDATA[#[{
    groupName: 	vars.incomingArtist.groupName,
    firstName: 	vars.incomingArtist.firstName,
    lastName: 	vars.incomingArtist.lastName,
    birthDate: 	vars.incomingArtist.dateOfBirth
}]]]></db:input-parameters>
		</db:select>
			<sps-logger:sps-logger doc:name="Select Insert" doc:id="83bc5fef-67b6-4ae3-9df9-fa5c8e461f92" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::Try::Artist:' ++ write(payload, 'application/json')]" category="${logcat}"/>
			<sps-logger:sps-logger doc:name="Update Payload" doc:id="f14e6f19-6b14-4c2f-a6ce-952d6e5d7caf" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::Try::Artist:' ++ write(payload, 'application/json')]" category="${logcat}"/>
			<set-payload value="#[output application/java&#10;var artist = vars.incomingArtist&#10;var newArtistId = vars.newArtistId[0].artist_id default 0&#10;---&#10;{&#10;	artistId: 	newArtistId,&#10;	groupName: 	artist.groupName,&#10;	lastName: 	artist.lastName,&#10;	firstName: 	artist.firstName,&#10;	mi:       	artist.mi,&#10;	dateOfBirth: 	artist.dateOfBirth,&#10;	dateOfDeath:	artist.dateOfDeath&#10;}]" doc:name="Update Payload" doc:id="315df187-19d1-4ce2-b29f-7380a0b9b272" />
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="3a179908-f333-4b0d-bf4d-905b46e54d35" type="DB:QUERY_EXECUTION">
					<sps-logger:sps-logger doc:name="Error" doc:id="bd80ab54-a4e1-4f44-8f87-1f3d200ef1f9" config-ref="SPS_Logger_Config" eventName="EXCEPTION" level="ERROR" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::Try::OnErrorPropagate:' ++ write(payload, 'application/json')]" category="${logcat}"/>
				</on-error-propagate>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="d5c1f55a-b92b-4778-9e83-0a9ac15e4866" type="EXPRESSION">
					<sps-logger:sps-logger doc:name="Error" doc:id="ffb7b32c-6b33-49d1-a5e3-0ca9ef0e8c83" config-ref="SPS_Logger_Config" eventName="EXCEPTION" level="ERROR" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::Try::OnErrorContinue:' ++ write(payload, 'application/json')]" category="${logcat}"/>
				</on-error-continue>
			</error-handler>
		</try>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="a1067dee-851d-481b-b959-b7fa781bcaa7" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-insert-artist::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="impl-add-artists" doc:id="d77e67c3-686e-410d-abd0-4078e145c3c9" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="fe285a06-6115-4182-986d-0a3fc4bb1707" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="artists, artistsOut, artistsFound" doc:id="17011c11-236e-41a3-bd77-4eb4403f98c2" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="artistsOut" ><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
				<ee:set-variable variableName="artistsFound" ><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
				<ee:set-variable variableName="artists" ><![CDATA[%dw 2.0
output application/json
---
payload.artists]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<sps-logger:sps-logger doc:name="Artists" doc:id="eadd2e87-4b61-435b-bef2-be82b8172a41" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<foreach doc:name="For Each Artist" doc:id="fdc08642-3e80-4f67-901f-50168927918c" collection="#[vars.artists]">
			<sps-logger:sps-logger doc:name="Artist" doc:id="02e50e53-8972-42b4-ba27-d99bc4dffa1c" config-ref="SPS_Logger_Config" eventName="BEFORE TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEach::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
			<set-payload value="#[output application/json&#10;---&#10;{&#10;	artist: {&#10;		artistId: payload.artistId,&#10;		groupName: payload.groupName,&#10;		lastName: payload.lastName,&#10;		firstName: payload.firstName,&#10;		mi: payload.mi,&#10;		dateOfBirth: payload.dateOfBirth,&#10;		dateOfDeath: payload.dateOfDeath&#10;	}&#10;}]" doc:name="artist" doc:id="e627c2d2-0df8-46aa-8b41-38d2366b5b18" />
			<sps-logger:sps-logger doc:name="Modified Artist" doc:id="f8fa27ca-7338-4830-b134-d5073e4b5877" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEach::Artist:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
			<flow-ref doc:name="sr-find-duplicate-artist" doc:id="ff1b7d3b-ae63-4c1d-8ec9-48e2fa6e241e" name="sr-find-duplicate-artist" target="getArtistResponse"/>
			<sps-logger:sps-logger doc:name="Modified Artist" doc:id="10659422-4ad5-4c23-ad54-3c58398341ff" config-ref="SPS_Logger_Config" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEach::Artist:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
			<choice doc:name="Artist Found?" doc:id="f158a545-b93e-4769-9e00-ae44864e42cc" >
				<when expression="#[vars.getArtistResponse.artists[0]==null]">
					<sps-logger:sps-logger doc:name="Modified Artist" doc:id="abf67293-d95b-47bf-87b3-90f3b306eb8a" config-ref="SPS_Logger_Config" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEachChoice::Artist:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<flow-ref doc:name="sr-insert-artist" doc:id="1142bbc3-6019-4567-8724-955e0cae78bb" name="sr-insert-artist" target="newArtist" />
					<sps-logger:sps-logger doc:name="Insert Artist" doc:id="e1e9b309-9131-4306-88e7-cc2e3fedadfc" config-ref="SPS_Logger_Config" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEachChoice::Artist:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
					<set-variable value="#[%dw 2.0&#10;output application/java&#10;---&#10;vars.artistsOut + vars.newArtist]" doc:name="artistsOut" doc:id="caeafbaa-8d5a-4505-8bd0-909eaec725ef" variableName="artistsOut" />
					<sps-logger:sps-logger doc:name="artistOut" doc:id="4212dcaa-8ac0-471d-867b-80e0e642e1a9" config-ref="SPS_Logger_Config" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEachChoice::Artist:'  ++ write(vars.artistsOut, 'application/json')]" category="${logcat}"/>
				</when>
				<otherwise >
					<set-variable value="#[%dw 2.0&#10;output application/json&#10;---&#10;vars.artistsFound + vars.getArtistResponse.artists[0]]" doc:name="append artistFound" doc:id="3a31d873-abf0-4f5e-ad8f-1818044fadfa" variableName="artistsFound"/>
					<sps-logger:sps-logger doc:name="artistFound" doc:id="b9b40172-08b5-4a80-b330-81f179e0991a" config-ref="SPS_Logger_Config" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::ForEachChoice::Artist:'  ++ write(vars.artistsFound, 'application/json')]" category="${logcat}"/>
				</otherwise>
			</choice>
		</foreach>
		<sps-logger:sps-logger doc:name="Artists Payload" doc:id="941ca89a-5059-4ee1-9afa-25afbe9a647c" config-ref="SPS_Logger_Config" eventName="BEFORE TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::Artist:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<ee:transform doc:name="add response" doc:id="2f46330c-3f13-4589-8bf1-2c5c0b9efe12" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
"statusCode": if (sizeOf(vars.artistsFound) > 0) p('http.add.status.partial') else p('http.add.status.ok'),
"message":  if (sizeOf(vars.artistsFound) > 0) p('http.add.message.partial') else p('http.add.message.ok'),
    	results: {
		addedCounts: if (vars.artistsOut[0]==null) "0" else sizeOf(vars.artistsOut), 
		addedArtists: if (vars.artistsOut[0]==null) "[]" else vars.artistsOut, 
	duplicatedCounts: if (vars.artistsFound[0]==null) "0" else sizeOf(vars.artistsFound), 
		duplicatedArtists: if (vars.artistsFound[0]==null) "[]" else vars.artistsFound, 
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="8b8119ae-f6bc-4539-ad87-3a5a9fd0def0" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-add-artists::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="sr-get-artist-info" doc:id="f48f8db1-cd5f-48e0-8867-c914fc3a52eb" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="7c8940a3-8ea2-4434-8648-31ce9fdaf744" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-get-artist-info::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<http:request method="GET" doc:name="Get Artist Bio" doc:id="f03e2cec-6b20-41d3-aec1-e4534f3a554d" config-ref="last-fm-http-config" path="/${last.fm.version}">
			<http:query-params><![CDATA[#[{
	"method": vars.lastFmProperties.method,
	"api_key": vars.lastFmProperties.apiKey,
	"artist": vars.lastFmProperties.artist,
	"format": vars.lastFmProperties.format
}]]]></http:query-params>
		</http:request>
		<sps-logger:sps-logger doc:name="Artist Bio" doc:id="5796e32b-e2d4-4275-8eb6-38270186b33f" config-ref="SPS_Logger_Config" targetSystem="${last.fm.host}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-get-artist-info::Request::payload:' ++ write(payload, 'application/json')]" statusCode="#[if(payload.artist.bio.content==null) p('http.get.status.nf') else p('http.get.status.ok')]" category="${logcat}"/>
		<ee:transform doc:name="response" doc:id="7b9751d1-f8f4-44c6-aeea-35c8c79ff2fb">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var NOT_FOUND_STATUS = p('http.patch.status.nf')
var NOT_FOUND_MESSAGE = p('http.patch.message.nf')
var FOUND_STATUS = p('http.patch.status.ok')
var FOUND_MESSAGE = p('http.patch.message.ok')
---
{
	statusCode: if(payload.artist.bio.content==null) (NOT_FOUND_STATUS) else (FOUND_STATUS),
	message: if(payload.artist.bio.content==null) (NOT_FOUND_MESSAGE) else (FOUND_MESSAGE),
	bioUrl: if(payload.artist.bio.content != null) (payload.artist.bio.links.link.href)  else (NOT_FOUND_MESSAGE)

}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="67fd4e35-9d98-4d71-9c7f-902010e2c463" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['subflow-name::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
	<sub-flow name="impl-update-artist-urls" doc:id="4bed8fd0-c0a2-47ce-9883-7db30dedc59a" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="e7a18d20-9b07-4522-b8ed-1de53c044add" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;	method: p('last.fm.method'),&#10;	apiKey: p('last.fm.api.key'),&#10;	format: p('last.fm.format'),&#10;	artist: payload.groupName&#10;}]" doc:name="lastFmProperties" doc:id="9807aa95-68b8-4438-afac-f1a88e212605" variableName="lastFmProperties"/>
		<sps-logger:sps-logger doc:name="lastFmProperties" doc:id="53ca4fc3-faee-4ac0-976d-72d7cef5edff" config-ref="SPS_Logger_Config" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::Var::lastFmProperties:' ++ write(vars.lastFmProperties, 'application/json')]" category="${logcat}"/>
		<flow-ref doc:name="sr-get-artist-info" doc:id="8e2ca454-261d-431c-a1cd-44a2442cbc7f" name="sr-get-artist-info" target="lastFmResponse"/>
		<sps-logger:sps-logger doc:name="Artist Info" doc:id="fab2c4fd-5c77-4f52-a0e8-90e4c22eb4dd" config-ref="SPS_Logger_Config" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
		<choice doc:name="Artist Found?" doc:id="8bb5b347-d7df-435d-9188-ff011a8aba84" >
			<when expression='#[vars.lastFmResponse.statusCode=="201"]'>
				<sps-logger:sps-logger doc:name="Artist" doc:id="833a7858-eef5-4891-b950-674eec65eaf1" config-ref="SPS_Logger_Config" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::Choice::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
				<flow-ref doc:name="sr-patch-artist" doc:id="f4f2ff11-8318-46f3-a67d-3d14101e5c45" name="sr-patch-artist"/>
				<sps-logger:sps-logger doc:name="Patch Artist" doc:id="876ef505-261c-4cc5-89e5-95e17f3549ff" config-ref="SPS_Logger_Config" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::Choice::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
			</when>
			<otherwise >
				<sps-logger:sps-logger doc:name="Artist" doc:id="4a97554b-11e9-4198-b1c5-5beec176c345" config-ref="SPS_Logger_Config" eventName="BEFORE TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::Choice::payload:' ++ write(payload, 'application/json')]" category="${logcat}" />
				<ee:transform doc:name="NOT FOUND response" doc:id="48e9db4d-f9b8-4c5a-87a2-b6b0c19aea3b" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.lastFmResponse
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<sps-logger:sps-logger doc:name="Not Found" doc:id="10a60cf0-0560-4599-be2b-4b9c1b3fb88c" config-ref="SPS_Logger_Config" eventName="AFTER TRANSFORM" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::Choice::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
			</otherwise>
		</choice>
		<sps-logger:sps-logger doc:name="INFO END" doc:id="61382a23-c039-4b51-b93b-ec109abbd812" config-ref="SPS_Logger_Config" correlationId="#[vars.headerAttributes.correlationId]" message="#['impl-update-artist-urls::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}" eventName="END"/>
	</sub-flow>
	<sub-flow name="sr-patch-artist" doc:id="d3a7c5d7-3123-4465-9d40-ab3e51b205da" >
		<sps-logger:sps-logger doc:name="INFO START" doc:id="1b74af61-a03d-4e76-b821-77c2d296591f" config-ref="SPS_Logger_Config" eventName="START" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-patch-artist::START::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-variable value="#[vars.lastFmResponse.bioUrl]" doc:name="bioUrl" doc:id="09227298-6e7b-4f68-81db-5bbcf133eca5" variableName="bioUrl"/>
		<sps-logger:sps-logger doc:name="bioUrl" doc:id="4c32f285-b24b-44d1-9571-a97b6a1918db" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="BEFORE REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-patch-artist::Update::payload:' ++ write(vars.bioUrl, 'application/json')]" category="${logcat}"/>
		<db:update doc:name="Update artist" doc:id="4e412574-8e6c-4067-940a-6f0086c2b2e9" config-ref="mysql-config">
			<db:sql ><![CDATA[UPDATE BC_ARTIST
  SET bio_url = :bioUrl
  WHERE group_nm = :groupName]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	bioUrl: vars.bioUrl,
	groupName: vars.lastFmProperties.artist
}]]]></db:input-parameters>
		</db:update>
		<sps-logger:sps-logger doc:name="Update Artist" doc:id="5f1b45a6-debf-4e7a-a416-03c36a128183" config-ref="SPS_Logger_Config" targetSystem="${db.databaseMusic}" eventName="AFTER REQUEST" level="DEBUG" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-patch-artist::Update::payload:' ++ write(payload, 'application/json')]" category="${logcat}"/>
		<set-payload value="#[%dw 2.0&#10;output application/json&#10;var FOUND_STATUS = p('http.get.status.ok')&#10;var FOUND_MESSAGE = p('http.get.message.ok')&#10;---&#10;{&#10;	statusCode: FOUND_STATUS,&#10;	message: FOUND_MESSAGE,&#10;	bioUrl: vars.bioUrl,&#10;	recordsUpdated: payload.affectedRows&#10;}]" doc:name="Set Payload" doc:id="1aa407b7-51ab-44ed-9d61-7c048d10f57a" />
		<sps-logger:sps-logger doc:name="INFO END" doc:id="7133c4e7-5c47-44a6-9c2a-fc5165f708b6" config-ref="SPS_Logger_Config" eventName="END" correlationId="#[vars.headerAttributes.correlationId]" message="#['sr-patcj-artist::END::payload:'  ++ write(payload, 'application/json')]" category="${logcat}"/>
	</sub-flow>
</mule>
